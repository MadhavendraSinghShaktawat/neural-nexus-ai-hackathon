You are a senior TypeScript programmer with experience in the Express.js framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Use JSDoc to document public classes, methods, and utility functions.
- Don't leave blank lines within a function.
- One export per file.
- Use async/await for all asynchronous operations; avoid callbacks.
- Prioritize efficient API communication (minimize redundant requests).

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.
- Wrap external API/database calls in a separate service layer.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.
- Ensure structured responses from Gemini API.
- Implement caching where necessary to improve performance.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.
- Separate concerns: API handlers, services, and database operations should be in different files.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.
- Centralize error handling in middleware.
- Use HTTP status codes correctly (400 for bad requests, 401 for unauthorized, 403 for forbidden, etc.).

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
  - Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write integration tests for each API module.
  - Follow the Given-When-Then convention.
- Mock database calls using tools like Jest or sinon.
- Ensure API routes return expected status codes.

## Specific to AI-Powered Virtual Therapist (Node.js + MongoDB + Gemini API)

### Basic Principles

- Use modular architecture.
- Encapsulate the API in modules.
  - One module per main domain/route.
  - One controller per route.
    - And other controllers for secondary routes.
  - A models folder with Mongoose schemas.
    - DTOs validated with class-validator for inputs.
    - Declare simple types for outputs.
  - A services module with business logic and API/database operations.
    - One service per entity.
- Use middleware for:
  - Authentication (Clerk)
  - Input validation (Zod or express-validator)
  - Logging (Winston or Morgan)
  - Error handling (Centralized error handler)
  - Rate limiting to prevent abuse.
- Implement request validation for structured API interactions.

### AI API Integration (Gemini API)

- Implement a separate **GeminiService** to handle AI requests.
- Ensure **structured prompts** for accurate responses.
- Implement **context management** for multi-turn conversations.
- Cache AI responses where applicable.
- Limit requests per minute to prevent excessive API costs.

### Chatbot API Best Practices

- Maintain a **session-based approach** for tracking user interactions.
- Store past messages in MongoDB for **context-aware responses**.
- Provide fallbacks when Gemini API fails.
- Support both **text and voice-based input**.

### Database (MongoDB)

- Use Mongoose ODM.
- Define proper indexes for chatbot conversations.
- Store chat history with timestamps and user IDs.
- Implement **auto-cleanup of old data** to optimize performance.
- Implement pagination for chat history retrieval.

### API Best Practices

- Follow RESTful principles for API endpoints.
- Use proper HTTP status codes.
- Implement API versioning.
- Document API endpoints using OpenAPI (Swagger).
- Consider WebSocket support for real-time chat updates.

### Testing

- Use Jest + Supertest for API testing.
- Write tests for GeminiService responses.
- Ensure chatbot sessions are handled properly.
- Mock AI responses in unit tests.

## Folder Structure Guidelines

src/  
│── main.ts # Entry point  
│── app.module.ts # Root module  
│── config/ # Configuration files (dotenv, database, etc.)  
│── common/ # Shared utilities, decorators, guards, filters, pipes  
│ │── decorators/  
│ │── filters/  
│ │── guards/  
│ │── pipes/  
│── modules/ # Business logic, divided into modules  
│ │── chat/ # Chatbot API module  
│ │ │── chat.module.ts  
│ │ │── chat.controller.ts  
│ │ │── chat.service.ts  
│ │ │── chat.entity.ts  
│ │ │── dto/ # Data Transfer Objects  
│ │ │── interfaces/ # TypeScript interfaces  
│ │── auth/ # Authentication module  
│ │── user/ # User module  
│ │── history/ # Chat history storage  
│── services/ # Business logic services  
│── database/ # Database configuration and migrations  
│── middleware/ # Global middlewares  
│── interceptors/ # Global interceptors  
│── tests/ # Unit and integration tests  
│── scripts/ # Utility scripts  
│── logs/ # Log files (if enabled)
